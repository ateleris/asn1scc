group c_isvalid;

rtlModuleName() ::= ""


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if (ret) {
    <soNestedPart>
}
<endif>
>>

JoinTwoIfFirstOk(sStr1,sStr2) ::=<<
<sStr1>
if (ret) {
    <sStr2>
}   /*COVERAGE_IGNORE*/
>>

JoinItems2(sPart, sNestedPart) ::= <<
<sPart>
if (ret) {
    <sNestedPart>
}   /*COVERAGE_IGNORE*/
>>





always_true_statement ()::= <<
ret = TRUE;
>>

always_false_statement(sErrorCodeName)::= <<
ret = FALSE;                        /*COVERAGE_IGNORE*/
*pErrCode = <sErrorCodeName>;       /*COVERAGE_IGNORE*/
>>


makeExpressionToStatement0(sIsValidExp) ::= <<
ret = <sIsValidExp>;
>>

convertVCBExpressionToStatementAndUpdateErrCode(sIsValidExp, sErrCode) ::= <<
ret = <sIsValidExp>;
*pErrCode = ret ? 0 :  <sErrCode>;
>>

convertVCBStatementToStatementAndUpdateErrCode(sStatement, sErrCode) ::= <<
<sStatement>
*pErrCode = ret ? 0 :  <sErrCode>;
>>

convertVCBTRUEToStatementAndUpdateErrCode() ::= <<
ret = TRUE;
*pErrCode = 0;
>>
convertVCBFalseToStatementAndUpdateErrCode(sErrCode) ::= <<
ret = FALSE;
*pErrCode = <sErrCode>;
>>


/*
*****************************************************************************************
 C H E C K   C O N S T R A I N T S      F U N C T I O N S
*****************************************************************************************
*/







EmitTypeAssignment_composite_def_err_code(sErrCode, nErrValue, arrsErrorCodeComments) ::= <<
#define <sErrCode>		<nErrValue>  /*<arrsErrorCodeComments : {x|<x>}; separator = "\n">*/
>>
EmitTypeAssignment_composite_def(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes) ::= <<
<arrsErrcodes; separator="\n">
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode);
>>



EmitTypeAssignment_composite(sVarName, sPtrPrefix, sPtrSuffix, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs, arrsLocalVars, bUnreferenced) ::= <<
<arrsAlphaFuncs; separator="\n">
flag <sFuncName>(const <sTypeDefName><sPtrSuffix> <sVarName>, int* pErrCode)
{
    flag ret = TRUE;
    <arrsLocalVars; separator="\n">
<if(bUnreferenced)>
	(void)<sVarName>;

<endif>
    <sContent>

	return ret;
}
>>


GetEnumIndexByName(sEnumValuesArray, sEnumValuesArrayCount, sExp, bBinarySearch) ::= <<
<if(bBinarySearch)>binarySearch<else>linearSearch<endif>(<sEnumValuesArray>, <sEnumValuesArrayCount>, <sExp>) >= 0
>>

ExpEqual(sExp1, sExp2) ::= "(<sExp1> == <sExp2>)"
ExpStringEqual(sExp1, sExp2) ::= "(strcmp(<sExp1>,<sExp2>)  == 0)"
ExpGt(sExp1, sExp2) ::= "(<sExp1> \> <sExp2>)"
ExpGte(sExp1, sExp2) ::= "(<sExp1> \>= <sExp2>)"
ExpLt(sExp1, sExp2) ::= "(<sExp1> \< <sExp2>)"
ExpLte(sExp1, sExp2) ::= "(<sExp1> \<= <sExp2>)"
ExpOr(sExp1, sExp2) ::= "((<sExp1>) || (<sExp2>))"
ExpAnd(sExp1, sExp2) ::= "(<sExp1> && <sExp2>)"
ExpAndMulti(arrsExp) ::= <<
<arrsExp; separator=" && ">
>>
ExpNot(sExp) ::= "(!<sExp>)"
StrLen(sExp) ::= "strlen(<sExp>)"
ArrayLen(sExp, sAcc) ::= "<sExp><sAcc>nCount"


ExpressionToStatement(sExp1) ::=<<
ret = <sExp1>;
>>

StatementOrStatement(sStat1, sStat2) ::= <<
<sStat1>
if (!ret) {
    <sStat2>
}
>>


ExpressionOrStatement(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (!ret) {
    <sStat2>
}
>>

StatementOrExpression(sStat1, sExp2) ::= <<
<sStat1>
if (!ret) {
    ret = <sExp2>;
}
>>

StatementAndStatement(sStat1, sStat2) ::= <<
<sStat1>
if (ret) {
    <sStat2>
}
>>

ExpressionAndStatement(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (ret) {
    <sStat2>
}
>>

StatementAndExpression(sStat1, sExp2) ::= <<
<sStat1>
if (ret) {
    ret = <sExp2>;
}
>>

StatementNot(sStat) ::= <<
<sStat>
ret = !ret;
>>

StatementExceptStatement(sStat1, sStat2) ::= <<
<sStat1>
if (ret) {
    <sStat2>
    ret = !ret;
}
>>

ExpressionExceptStatement(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (ret) {
    <sStat2>
    ret = !ret;
}
>>

StatementExceptExpression(sStat1, sExp2) ::= <<
<sStat1>;
if (ret) {
    ret = !(<sExp2>);
}
>>

StatementForLoop(p, sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++)
{
	<sInnerStatement>
}
>>



Print_AlphabetCheckFunc(sFuncName, arrsAlphaConBody) ::= <<
flag <sFuncName>(const char* str)
{
    flag ret=TRUE;
    int i=0;

    while ((str[i] != '\0') && ret) {
        ret = ret && (<arrsAlphaConBody; separator=" && ">);
        i = i + 1;
    }
    return ret;
}
>>



SingleValConstraint(p, v) ::= "(<p> == <v>)"





stringContainsChar(sStrVal, p) ::= "strchr(<sStrVal>, <p>)"

RangeConstraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> && <p> \<<if(bMax)>=<endif> <v2>)"

RangeConstraint_val_MAX(p, v, bMin) ::= "(<p> ><if(bMin)>=<endif> <v>)"

RangeConstraint_MIN_val(p, v, bMax) ::= "(<p> \<<if(bMax)>=<endif> <v>)"


AND_Constraint(sCon1, sCon2) ::= "(<sCon1> && <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> || <sCon2>)"

AllExceptConstraint(sCon)  ::= "(!<sCon>)"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> &&  !<sCon2>)"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" && \">"






Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret = <arrsConstraints; separator=" && ">;
*pErrCode = ret ? 0 : <sErrCodeName>;
>>


call_base_type_func(p, sFuncName, soTypeCasting) ::= "ret = <sFuncName>(<p>, pErrCode);"

call_base_type_func_exp(p, sFuncName) ::= "<sFuncName>(<p>, pErrCode)"




/* SEQUENCE start*/


Sequence_OptionalChild(p, sAcc,  sChName, sInnerStatement) ::= <<
if (<p><sAcc>exist.<sChName>) {
	<sInnerStatement>
}
>>


Sequence_optional_child_always_present_or_absent(p, sAcc,  sChName, sErrCode, sPresOrAbs) ::= <<
ret= <p><sAcc>exist.<sChName> == <sPresOrAbs>;
*pErrCode = ret ? 0 : <sErrCode>;
>>

Sequence_optional_child_always_present_or_absent_expr(p, sAcc,  sChName, sPresOrAbs) ::= <<
<p><sAcc>exist.<sChName> == <sPresOrAbs>
>>



/* SEQUENCE end*/


/* CHOICE start*/

Choice_OptionalChild(p, sPLocal, sAcc, sChPresent, sInnerStatement) ::= <<
if (<p><sAcc>kind == <sChPresent>) {
	<sInnerStatement>
}
>>

Choice_child_always_present_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind == <sChPresent>
>>

Choice_child_always_absent_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind != <sChPresent>
>>

choice_child(sChPresent, sChildBody, bAlwaysAbsent, sChildName) ::= <<
case <sChPresent> : <if(bAlwaysAbsent)>/*COVERAGE_IGNORE*/<endif>
    <sChildBody>
    break;          <if(bAlwaysAbsent)>/*COVERAGE_IGNORE*/<endif>
>>


choice(p, sAccess, arrsChildren, sErrCodeForInvalidCase) ::= <<
switch (<p><sAccess>kind) {
    <arrsChildren; separator="\n">
    default: /*COVERAGE_IGNORE*/
	    *pErrCode = <sErrCodeForInvalidCase>;      /*COVERAGE_IGNORE*/
	    ret = FALSE;                               /*COVERAGE_IGNORE*/
}
>>

/* CHOICE end*/







sequenceOf(p,sAcc, i, bIsFixedSize, nFixedSize, soIsValidSizeExp, soErrCode, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret = <soIsValidSizeExp>;
*pErrCode = ret ? 0 :  <soErrCode>;

<endif>
<if (soInnerStatement)>
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++)
{
	<soInnerStatement>
}

<endif>
>>

sequenceOf2(p,sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++)
{
	<sInnerStatement>
}
>>


octet_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

octet_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>


objId_equal(p, sObjIdLiteral)::=<<
ObjectIdentifier_equal(<p>, &<sObjIdLiteral>)
>>
