group isvalid_python;

rtlModuleName() ::= ""

JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret.is_right():
    <soNestedPart>
# TODO: Remove old Scala Code (isvalid_python.stg):
# if ret.isRight then
#     <soNestedPart>
<endif>
>>

JoinTwoIfFirstOk(sStr1,sStr2) ::=<<
<sStr1>
if ret.is_right():
    <sStr2>
# TODO: Remove old Scala Code (isvalid_python.stg):
# if ret.isRight then
#     <sStr2>
>>

JoinItems2(sPart, sNestedPart) ::= <<
<sPart>
<sNestedPart>
>>

always_true_statement ()::= <<
ret = Right(0)
# TODO: Remove old Scala Code (isvalid_python.stg):
# ret = Right(0)
>>

always_false_statement(sErrorCodeName)::= <<
ret = Left(<sErrorCodeName>)
# TODO: Remove old Scala Code (isvalid_python.stg):
# ret = Left(<sErrorCodeName>)
>>

makeExpressionToStatement0(sIsValidExp) ::= <<
ret = Right(0) if <sIsValidExp> else Left(45)
# TODO: Remove old Scala Code (isvalid_python.stg):
# ret = <sIsValidExp> match
#     case true =>
#         Right(0)
#     case false =>
#         Left(45)
>>

convertVCBExpressionToStatementAndUpdateErrCode(sIsValidExp, sErrCode) ::= <<
ret = <sIsValidExp>
>>

convertVCBStatementToStatementAndUpdateErrCode(sStatement, sErrCode) ::= <<
<sStatement>
>>

convertVCBTRUEToStatementAndUpdateErrCode() ::= <<
ret = Right(0)
# TODO: Remove old Scala Code (isvalid_python.stg):
# ret = Right(0)
>>

convertVCBFalseToStatementAndUpdateErrCode(sErrCode) ::= <<
ret = Left(<sErrCode>)
# TODO: Remove old Scala Code (isvalid_python.stg):
# ret = Left(<sErrCode>)
>>

/*
*****************************************************************************************
 C H E C K   C O N S T R A I N T S      F U N C T I O N S
*****************************************************************************************
*/

EmitTypeAssignment_composite_def_err_code(sErrCode, nErrValue, arrsErrorCodeComments) ::= <<
<sErrCode>: Int32 = <nErrValue>  # <arrsErrorCodeComments : {x|<x>}; separator = "\n">
# TODO: Remove old Scala Code (isvalid_python.stg):
# @inline @cCode.inline val <sErrCode>: Int = <nErrValue> /*<arrsErrorCodeComments : {x|<x>}; separator = "\n"> */
>>

EmitTypeAssignment_composite_def(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes) ::= <<
<arrsErrcodes; separator="\n">
>>

EmitTypeAssignment_composite(sVarName, sPtrPrefix, sPtrSuffix, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs, arrsLocalVars, bUnreferenced) ::= <<
<arrsAlphaFuncs; separator="\n">
def <sFuncName>(<sVarName>: <sTypeDefName>) -> Union[ErrorCode, int]:
    ret: Union[ErrorCode, Int32] = Right(0)
    <arrsLocalVars; separator="\n">
    <sContent>
    return ret
# TODO: Remove old Scala Code (isvalid_python.stg):
# def <sFuncName>(<if(bUnreferenced)>@annotation.unused <endif><sVarName>: <sTypeDefName>): Either[ErrorCode, Int] =
# {
#     var ret: Either[ErrorCode, Int] = Right(0)
#     <arrsLocalVars; separator="\n">
#     <sContent>
#     ret
# }
>>

GetEnumIndexByName(sEnumValuesArray, sEnumValuesArrayCount, sExp, bBinarySearch) ::= <<
>>


ExpEqual(sExp1, sExp2) ::= "(<sExp1> == <sExp2>)"
ExpStringEqual(sExp1, sExp2) ::= "(<sExp1> == <sExp2>.encode())"  // TODO: Remove old Scala Code (isvalid_python.stg): (<sExp1>.sameElements(<sExp2>.getBytes))
ExpGt(sExp1, sExp2) ::= "(<sExp1> \> <sExp2>)"
ExpGte(sExp1, sExp2) ::= "(<sExp1> \>= <sExp2>)"
ExpLt(sExp1, sExp2) ::= "(<sExp1> \< <sExp2>)"
ExpLte(sExp1, sExp2) ::= "(<sExp1> \<= <sExp2>)"
ExpOr(sExp1, sExp2) ::= "((<sExp1>) or (<sExp2>))"  // TODO: Remove old Scala Code (isvalid_python.stg): ((<sExp1>) || (<sExp2>))
ExpAnd(sExp1, sExp2) ::= "(<sExp1> and <sExp2>)"  // TODO: Remove old Scala Code (isvalid_python.stg): (<sExp1> && <sExp2>)
ExpAndMulti(arrsExp) ::= <<
<arrsExp; separator=" and ">
# TODO: Remove old Scala Code (isvalid_python.stg):
# <arrsExp; separator=" && ">
>>
ExpNot(sExp) ::= "(not <sExp>)"  // TODO: Remove old Scala Code (isvalid_python.stg): (!<sExp>)
StrLen(sExp) ::= "<sExp>.find(b'\\x00')"  // TODO: Remove old Scala Code (isvalid_python.stg): <sExp>.indexOf(0.toRawUByte)
ArrayLen(sExp, sAcc) ::= "<sExp><sAcc>nCount"

ExpressionToStatement(sExp1) ::=<<
ret = <sExp1>
>>

StatementOrStatement(sStat1, sStat2) ::= <<
<sStat1>
if ret.is_left():
    <sStat2>
# TODO: Remove old Scala Code (isvalid_python.stg):
# if ret.isLeft then
#     <sStat2>
>>

ExpressionOrStatement(sExp1, sStat2) ::= <<
ret = <sExp1>
if ret.is_left():
    <sStat2>
# TODO: Remove old Scala Code (isvalid_python.stg):
# if ret.isLeft then
#     <sStat2>
>>

StatementOrExpression(sStat1, sExp2) ::= <<
<sStat1>
if ret.is_left():
    ret = <sExp2>
# TODO: Remove old Scala Code (isvalid_python.stg):
# if ret.isLeft then
#     ret = <sExp2>
>>

StatementAndStatement(sStat1, sStat2) ::= <<
<sStat1>
if ret.isRight then
    <sStat2>
>>

ExpressionAndStatement(sExp1, sStat2) ::= <<
ret = <sExp1>
if ret.isRight then
    <sStat2>
>>

StatementAndExpression(sStat1, sExp2) ::= <<
<sStat1>
if ret.isRight then
    ret = <sExp2>
>>

StatementNot(sStat) ::= <<
<sStat>
if ret.isRight then
    ret = Left(142)
else
    ret = Right(0)
>>

StatementExceptStatement(sStat1, sStat2) ::= <<
<sStat1>
if ret.isRight then
    <sStat2>
    if ret.isRight then
        ret = Left(152)
    else
        ret = Right(0)
>>

ExpressionExceptStatement(sExp1, sStat2) ::= <<
ret = <sExp1>
if ret.isRight then
    <sStat2>
    if ret.isRight then
        ret = Left(162)
    else
        ret = Right(0)
>>

StatementExceptExpression(sStat1, sExp2) ::= <<
<sStat1>
if ret.isRight then
    ret = (<sExp2>) match
        case Right(x) =>
            Left(171)
        case Left(x) =>
            Right(0)
>>

StatementForLoop(p, sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
<i> = 0
(while(ret.isRight && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>) {
    decreases(<if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif> - <i>)
    <sInnerStatement>
    <i> += 1
}).invariant(0 \<= <i> && <i> \<= <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>)
>>



Print_AlphabetCheckFunc(sFuncName, arrsAlphaConBody) ::= <<
def <sFuncName>(str0: Vector[UByte]): Boolean =
{
    str_ = str0.toVectorRaws
    valid: Boolean = true
    i: Int32 = 0
    while valid and i \< str_.length and str_[i] != CHAR_0000:
        assert i >= 0 and i \<= len(str_)
        decreases(str_.length - i)
        valid = valid and (<arrsAlphaConBody; separator=" and ">);
        i += 1
    return valid
}
>>



SingleValConstraint(p, v) ::= "(<p> == <v>)"





stringContainsChar(sStrVal, p) ::= "<sStrVal>.contains(<p>)"

RangeConstraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> and <p> \<<if(bMax)>=<endif> <v2>)"

RangeConstraint_val_MAX(p, v, bMin) ::= "(<p> ><if(bMin)>=<endif> <v>)"

RangeConstraint_MIN_val(p, v, bMax) ::= "(<p> \<<if(bMax)>=<endif> <v>)"


AND_Constraint(sCon1, sCon2) ::= "(<sCon1> and <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> or <sCon2>)"

AllExceptConstraint(sCon)  ::= "(not <sCon>)"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> and not <sCon2>)"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" and \">"

Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret = <arrsConstraints; separator=" and ">;
ret = <sErrCodeName>;
>>

call_base_type_func(p, sFuncName, soTypeCasting) ::= "ret = <sFuncName>(<p>)"
call_base_type_func_exp(p, sFuncName) ::= "<sFuncName>(<p>)"


/* SEQUENCE start*/


Sequence_OptionalChild(p, sAcc, sChName, sInnerStatement) ::= <<
if <p><sAcc><sChName> == <sChName>:
    <sInnerStatement>

# todo: remove scala code (isvalid_python.stg:284)
#<p><sAcc><sChName> match
#    case SomeMut(<sChName>) =>
#        <sInnerStatement>
#    case NoneMut() =>
>>


Sequence_optional_child_always_present_or_absent(p, sAcc,  sChName, sErrCode, sPresOrAbs) ::= <<
ret = Left(<sErrCode>);

# todo: what is this? ret is overwritten? (isvalid_python:296)
# ret = <p><sAcc><sChName>.isDefined == <sPresOrAbs>
#  ret = Left(<sErrCode>);
>>

Sequence_optional_child_always_present_or_absent_expr(p, sAcc,  sChName, sPresOrAbs) ::= <<
(<p><sAcc><sChName>.isDefined == <sPresOrAbs>)
>>

/* SEQUENCE end*/


/* CHOICE start*/

Choice_OptionalChild(p, sPLocal, sAcc, sChPresent, sInnerStatement) ::= <<
if <p> == <sChPresent>:
    <sInnerStatement>
    
# todo: remove scala code (isvalid_python:313)
#<p> match
#    case <sChPresent>(<sPLocal>) =>
#        <sInnerStatement>
#    case _ => ()
>>

Choice_child_always_present_Exp(p, sAcc, sChPresent) ::= <<
<p> == <sChPresent>
>>

Choice_child_always_absent_Exp(p, sAcc, sChPresent) ::= <<
<p> != <sChPresent>
>>

choice_child(sChPresent, sChildBody, bAlwaysAbsent, sChildName) ::= <<
case <sChPresent>:
    <sChildBody>

# todo: remove scala (isvalid_python:332)
# case <sChPresent>(<sChildName>) =>
#    <sChildBody>
>>

choice(p, sAccess, arrsChildren, sErrCodeForInvalidCase) ::= <<
match <p>:
    <arrsChildren; separator="\n">

# todo: remove scala (isvalid_python:341)
# <p> match
#     <arrsChildren; separator="\n">
>>

/* CHOICE end*/

sequenceOf(p,sAcc, i, bIsFixedSize, nFixedSize, soIsValidSizeExp, soErrCode, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret = <soIsValidSizeExp>
ret = <soErrCode> # todo: this overwrites the above assignment?

<endif>
<if (soInnerStatement)>
for <i> in range(<if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>):
    if not ret:
        break
    <soInnerStatement>

<endif>

# todo: remove scala code
# <if(!bIsFixedSize)>
# ret = <soIsValidSizeExp>;
# ret = <soErrCode>;
# 
# <endif>
# <if (soInnerStatement)>
# for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++)
# {
#     <soInnerStatement>
# }
# 
# <endif>
>>

sequenceOf2(p,sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
<i> = 0
while <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>:
    <sInnerStatement>
    <i> = <i> + 1

# todo: remove scala code (isvalid_python:380)
# <i> = 0
# (while(<i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif> && ret.isRight) {
#     decreases(<if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif> - <i>)
#     <sInnerStatement>
#     <i> = <i> + 1
# }).invariant(0 \<= <i> && <i> \<= <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>)
>>


octet_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

octet_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>


objId_equal(p, sObjIdLiteral)::=<<
ObjectIdentifier_equal(<p>, &<sObjIdLiteral>)
>>
