# header_python PrintSpecificationFile
# header_python.stg 11
"""
Code automatically generated by asn1scc tool
Header / Spec implementation
"""
from asn1python import *
from typing import *
import BasicTypes
from enum import Enum
from dataclasses import dataclass, field

# header_python Define_TAS
# header_python.stg 29
# header_python Define_new_enumerated
# header_python.stg 116
class DeviceAddress(Enum):
    addr0 = 1 # header_python.stg 107# header_python Define_new_enumerated_item


    # please use the following macros to avoid breaking code.
    # header_python Define_new_enumerated_item_macro
    # header_python.stg 111
    # type addr0 = DeviceAddress.addr0

    # equal_python equalTypeAssignment_def


    # isvalid_python EmitTypeAssignment_composite_def
    # isvalid_python.stg 74
    # isvalid_python EmitTypeAssignment_composite_def_err_code
    # isvalid_python.stg 69
    ERR_DEVICEADDRESS: int = 4111  # addr0

    # init_python initTypeAssignment_def


    # acn_python.stg 25# acn_python EmitEncodingSizeConstants


    # acn_python EmitTypeAssignment_primitive_def_encode
    # acn_python.stg 29
    # acn_python EmitTypeAssignment_def_err_code
    # acn_python.stg 18
    ERR_ACN_ENCODE_DEVICEADDRESS: int = 4114  #
DeviceAddress_REQUIRED_BYTES_FOR_ACN_ENCODING: int = 0
DeviceAddress_REQUIRED_BITS_FOR_ACN_ENCODING: int = 0

# acn_python EmitTypeAssignment_primitive_def_decode
# acn_python.stg 55
# acn_python EmitTypeAssignment_def_err_code
# acn_python.stg 18
ERR_ACN_DECODE_DEVICEADDRESS: int = 4115  #
# header_python Define_TAS
# header_python.stg 29
# header_python Define_new_sequence
# header_python.stg 245
# -- TC_2_1_DistributeOnOffDeviceCommands --------------------------------------------
# header_python Define_new_sequence_of
# header_python.stg 201

@dataclass(frozen=True)
class TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses:
    nCount: int = 0
    arr: List[int] = field(default_factory=list)




@dataclass(frozen=True)
class TC_2_1_DistributeOnOffDeviceCommands:
    # header_python Define_new_sequence_child
    # header_python.stg 234
    onOffDeviceAddresses: TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses


    # equal_python equalTypeAssignment_def


    # equal_python equalTypeAssignment_def


    # isvalid_python EmitTypeAssignment_composite_def
    # isvalid_python.stg 74
    # isvalid_python EmitTypeAssignment_composite_def_err_code
    # isvalid_python.stg 69
    ERR_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_ONOFFDEVICEADDRESSES: int = 4126  # (SIZE(1 .. maxTC-2-1-OnOffDeviceAdressesCount))
    # isvalid_python EmitTypeAssignment_composite_def_err_code
    # isvalid_python.stg 69
    ERR_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_ONOFFDEVICEADDRESSES_ELM_2: int = 4121  #

    # isvalid_python EmitTypeAssignment_composite_def
    # isvalid_python.stg 74
    # isvalid_python EmitTypeAssignment_composite_def_err_code
    # isvalid_python.stg 69
    ERR_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS: int = 4131  #

    # init_python initTypeAssignment_def

    # init_python initTypeAssignment_def


    # acn_python.stg 25# acn_python EmitEncodingSizeConstants


    # acn_python EmitTypeAssignment_primitive_def_encode
    # acn_python.stg 29
    TC_2_1_DistributeOnOffDeviceCommands_REQUIRED_BYTES_FOR_ACN_ENCODING: int = 1
    TC_2_1_DistributeOnOffDeviceCommands_REQUIRED_BITS_FOR_ACN_ENCODING: int = 6

    # acn_python EmitTypeAssignment_primitive_def_decode
    # acn_python.stg 55
    # acn_python EmitTypeAssignment_def_err_code
    # acn_python.stg 18
    ERR_ACN_DECODE_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS: int = 4135  #
    # acn_python EmitTypeAssignment_def_err_code
    # acn_python.stg 18
    ERR_ACN_DECODE_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_ONOFFDEVICEADDRESSES: int = 4130  #
    # acn_python EmitTypeAssignment_def_err_code
    # acn_python.stg 18
    ERR_ACN_DECODE_TC_2_1_DISTRIBUTEONOFFDEVICECOMMANDS_ONOFFDEVICEADDRESSES_ELM_2: int = 4125  #

# header_python PrintValueAssignment
# header_python.stg 36
maxTC_2_1_OnOffDeviceAdressesCount: int = 63  # defined in body

# body_python printSourceFile
"""
Body Implementation
"""

maxTC_2_1_OnOffDeviceAdressesCount: int = 63 # variables:172# variables_python PrintValueAssignment

# body_python printTass

# equal_python equalTypeAssignment
# equal_python.stg 64
# todo: no equals necessary if we use @dataclass!
# def __eq__(self, other) -> bool:

# isvalid_python EmitTypeAssignment_composite
# isvalid_python.stg 79
def is_constraint_valid(self) -> Union[int, Asn1SccError]:
    ret: Union[int, Asn1SccError] = 0
    # isvalid_python convertVCBStatementToStatementAndUpdateErrCode
    # isvalid_python.stg 48
    # isvalid_python makeExpressionToStatement0
    # isvalid_python.stg 38
    ret: int = 0 if (pVal == DeviceAddress.addr0)# isvalid_python ExpEqual
    else Asn1SccError(45)
# isvalid_python.stg 85
return ret

# init_python initTypeAssignment
def DeviceAddress_Initialize() -> DeviceAddress:
    # init_python.stg 10
    return DeviceAddress.addr0

# acn_python EmitTypeAssignment_primitive_encode
# acn_python.stg 36
def DeviceAddress_ACN_Encode(pVal: DeviceAddress, codec: ACNCodec, bCheckConstraints: bool) -> Union[int, Asn1SccError]:
    res = DeviceAddress_IsConstraintValid(pVal)
    if isinstance(res, Asn1SccError):
        # acn_python.stg 43
        return res

    # acn_python EnumeratedEncValues_encode
    # acn_python.stg 445
    intVal_pVal = # acn_python Enumerated_item_encode
    # acn_python.stg 422
    if pVal == DeviceAddress.addr0:
        # acn_python.stg 424
        return 0
    # uper_python IntFullyConstraintPos_encode
    # uper_python.stg 150
    codec.base.encodeConstrainedPosWholeNumber(intVal_pVal, 0, 0)
    # acn_python.stg 50
    return 0

# acn_python EmitTypeAssignment_primitive_decode
# acn_python.stg 60
def DeviceAddress_ACN_Decode(codec: ACNCodec) -> Union[DeviceAddress, Asn1SccError]:

    # acn_python EnumeratedEncValues_decode
    # acn_python.stg 451
    # uper_python IntFullyConstraintPos_decode
    # uper_python.stg 156
    intVal_pVal = codec.base.decodeConstrainedPosWholeNumber(0, 0) # uper:135
    decoded_value = int(intVal_pVal)

    # acn_python Enumerated_item_decode
    # acn_python.stg 428
    if decoded_value == 0:
        # acn_python.stg 430
        pVal = DeviceAddress.addr0
    # acn_python.stg 456
    # TODO: pVal = Asn1SccError(ERR_ACN_DECODE_DEVICEADDRESS)

    res = DeviceAddress_IsConstraintValid(pVal)
    if isinstance(res, Asn1SccError):
        # acn_python.stg 70
        return res
    else:
        # acn_python.stg 73
        return pVal

def DeviceAddress_ACN_Decode_pure(codec: ACNCodec) -> Tuple[ACNCodec, Union[DeviceAddress, Asn1SccError]]:
    cpy = codec.copy()
    res = DeviceAddress_ACN_Decode(cpy)
    # acn_python.stg 84
    return cpy, res
# body_python printTass

# equal_python equalTypeAssignment
# equal_python.stg 64
# todo: no equals necessary if we use @dataclass!
# def __eq__(self, other) -> bool:

# equal_python equalTypeAssignment
# equal_python.stg 64
# todo: no equals necessary if we use @dataclass!
# def __eq__(self, other) -> bool:

# isvalid_python EmitTypeAssignment_composite
# isvalid_python.stg 79
def is_constraint_valid(self) -> Union[int, Asn1SccError]:
    ret: Union[int, Asn1SccError] = 0
    i1 = 0
    # isvalid_python JoinTwoIfFirstOk
    # isvalid_python.stg 15
    # isvalid_python convertVCBStatementToStatementAndUpdateErrCode
    # isvalid_python.stg 48
    # isvalid_python makeExpressionToStatement0
    # isvalid_python.stg 38
    ret: int = 0 if ((1 <= pVal.nCount# isvalid_python ArrayLen
                      )# isvalid_python ExpLte
                     and (pVal.nCount# isvalid_python ArrayLen
                          <= 63)# isvalid_python ExpLte
                     )# isvalid_python ExpAnd
    else Asn1SccError(45)
if not isinstance(ret, Asn1SccError):
    # isvalid_python sequenceOf2
    # isvalid_python.stg 332
    i1: int = 0
    while i1 < pVal.nCount:
        ret = DeviceAddress_IsConstraintValid(self.self.pVal.arr[i1])# isvalid_python call_base_type_func

        i1 = i1 + 1
# isvalid_python.stg 85
return ret

# isvalid_python EmitTypeAssignment_composite
# isvalid_python.stg 79
def is_constraint_valid(self) -> Union[int, Asn1SccError]:
    ret: Union[int, Asn1SccError] = 0
    ret = TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses_IsConstraintValid(self.onOffDeviceAddresses)# isvalid_python call_base_type_func

    # isvalid_python.stg 85
    return ret

# init_python initTypeAssignment
def TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses_Initialize() -> TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses:
    # init_python.stg 10
    return TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses(1, [DeviceAddress.addr0] * 63)# init_python initVarSizeSequenceOfExpr

# init_python initTypeAssignment
def TC_2_1_DistributeOnOffDeviceCommands_Initialize() -> TC_2_1_DistributeOnOffDeviceCommands:
    # init_python.stg 10
    return TC_2_1_DistributeOnOffDeviceCommands(onOffDeviceAddresses = TC_2_1_DistributeOnOffDeviceCommands_onOffDeviceAddresses_Initialize())

# acn_python EmitTypeAssignment_primitive_encode
# acn_python.stg 36
def TC_2_1_DistributeOnOffDeviceCommands_ACN_Encode(pVal: TC_2_1_DistributeOnOffDeviceCommands, codec: ACNCodec, bCheckConstraints: bool) -> Union[int, Asn1SccError]:
    res = TC_2_1_DistributeOnOffDeviceCommands_IsConstraintValid(pVal)
    if isinstance(res, Asn1SccError):
        # acn_python.stg 43
        return res


    # acn_python.stg 50
    return 0

# acn_python EmitTypeAssignment_primitive_decode
# acn_python.stg 60
def TC_2_1_DistributeOnOffDeviceCommands_ACN_Decode(codec: ACNCodec) -> Union[TC_2_1_DistributeOnOffDeviceCommands, Asn1SccError]:
    i1 = 0
    nCount = 0

    # uper_python sequence_build
    # uper_python.stg 441
    pVal = TC_2_1_DistributeOnOffDeviceCommands(pVal_onOffDeviceAddresses)

    res = TC_2_1_DistributeOnOffDeviceCommands_IsConstraintValid(pVal)
    if isinstance(res, Asn1SccError):
        # acn_python.stg 70
        return res
    else:
        # acn_python.stg 73
        return pVal

def TC_2_1_DistributeOnOffDeviceCommands_ACN_Decode_pure(codec: ACNCodec) -> Tuple[ACNCodec, Union[TC_2_1_DistributeOnOffDeviceCommands, Asn1SccError]]:
    cpy = codec.copy()
    res = TC_2_1_DistributeOnOffDeviceCommands_ACN_Decode(cpy)
    # acn_python.stg 84
    return cpy, res