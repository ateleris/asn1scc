# header_python PrintSpecificationFile
# header_python.stg 11
"""
Code automatically generated by asn1scc tool
Header / Spec implementation
"""
from asn1python import *
from typing import *
import BasicTypes
from enum import Enum
from dataclasses import dataclass, field

@dataclass(frozen=True)
class VerificationRequest_ID_packet_ID(Asn1Base):
    packetType: TC_Packet.TC_PacketType = 0
    secondaryHeaderFlag: PacketTypes.SecondaryHeaderFlag = 0
    applicationProcess_ID: ApplicationProcess.ApplicationProcess_ID = 0

    def is_constraint_valid(self) -> Union[int, Asn1SccError]:
        ret = self.secondaryHeaderFlag.is_constraint_valid()
        if ret:
            ret = self.applicationProcess_ID.is_constraint_valid()
        return ret

@dataclass(frozen=True)
class VerificationRequest_ID(Asn1Base):
    packetVersionNumber: PacketTypes.PacketVersionNumberValue = 0
    packet_ID: VerificationRequest_ID_packet_ID = VerificationRequest_ID_packet_ID()
    packetSequenceControl: PacketTypes.PacketSequenceControl = PacketTypes.PacketSequenceControl()

    ERR_VERIFICATIONREQUEST_ID_PACKET_ID: int = 178  #
    ERR_VERIFICATIONREQUEST_ID_PACKET_ID_PACKETTYPE: int = 153  #
    ERR_VERIFICATIONREQUEST_ID_PACKET_ID_SECONDARYHEADERFLAG_2: int = 163  #
    ERR_VERIFICATIONREQUEST_ID_PACKET_ID_APPLICATIONPROCESS_ID_2: int = 173  #

    ERR_VERIFICATIONREQUEST_ID: int = 188  #
    ERR_VERIFICATIONREQUEST_ID_PACKETVERSIONNUMBER: int = 144  #
    ERR_VERIFICATIONREQUEST_ID_PACKETSEQUENCECONTROL: int = 183  #

    VerificationRequest_ID_REQUIRED_BYTES_FOR_ACN_ENCODING: int = 4
    VerificationRequest_ID_REQUIRED_BITS_FOR_ACN_ENCODING: int = 26

    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID: int = 192  #
    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKETVERSIONNUMBER_2: int = 148  #
    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID: int = 182  #
    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID_PACKETTYPE_2: int = 157  #
    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID_SECONDARYHEADERFLAG_2: int = 167  #
    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID_APPLICATIONPROCESS_ID_2: int = 177  #
    ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKETSEQUENCECONTROL: int = 187  #


    def is_constraint_valid(self) -> Union[int, Asn1SccError]:
        ret = self.packet_ID.is_constraint_valid()
        if ret:
            ret = self.packetSequenceControl.is_constraint_valid()
        return ret

    def encode(self, codec: Codec):

    # acn_python EmitTypeAssignment_primitive_encode
    # acn_python.stg 36
    def VerificationRequest_ID_ACN_Encode(pVal: VerificationRequest_ID, codec: ACNCodec, bCheckConstraints: bool) -> Union[int, Asn1SccError]:
        res = VerificationRequest_ID_IsConstraintValid(pVal)
        if isinstance(res, Asn1SccError):
            # acn_python.stg 43
            return res


        # acn_python.stg 50
        return 0

    # acn_python EmitTypeAssignment_primitive_decode
    # acn_python.stg 60
    def VerificationRequest_ID_ACN_Decode(codec: ACNCodec) -> Union[VerificationRequest_ID, Asn1SccError]:

        # uper_python sequence_build
        # uper_python.stg 441
        pVal = VerificationRequest_ID(self_packetVersionNumber, pVal_packet_ID, self_packetSequenceControl)

        res = VerificationRequest_ID_IsConstraintValid(pVal)
        if isinstance(res, Asn1SccError):
            # acn_python.stg 70
            return res
        else:
            # acn_python.stg 73
            return pVal

    def VerificationRequest_ID_ACN_Decode_pure(codec: ACNCodec) -> Tuple[ACNCodec, Union[VerificationRequest_ID, Asn1SccError]]:
        cpy = codec.copy()
        res = VerificationRequest_ID_ACN_Decode(cpy)
        # acn_python.stg 84
        return cpy, res